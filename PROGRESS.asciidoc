Klam Implementation Progress
============================

This document tracks the progress of Klam towards a feature-complete 1.0.0
release.

Implemented
-----------

Language Features
~~~~~~~~~~~~~~~~~
* Reader
* Environment
* Code Generation
** Atoms
*** Booleans
*** Numbers
*** Strings
*** Symbols

Primitives
~~~~~~~~~~
* Lists
** +cons+
** +hd+
** +tl+
** +cons?+
* Generic Functions
** +eval-kl+

Ruby Interoperation
~~~~~~~~~~~~~~~~~~~
* Ruby \<\-> Kl converters
** Array \<\-> List


Not Yet Implemented
-------------------

Language Features
~~~~~~~~~~~~~~~~~
* Environment
** Global function space
** Global variable space
* Code Generation
** Special forms (listed among the primitives below)
** Function application
*** Functions from global environment
*** Functions passed as arguments
*** Partial application
*** Uncurrying
*** Tail call elimination (self-tail-calls only)
*** Inlining of simple primitives

Primitives
~~~~~~~~~~
As defined in
http://www.shenlanguage.org/learn-shen/shendoc.htm#The%20Primitive%20Functions%20of%20K%20Lambda[The
Primitive Functions of Kl]:

* Boolean Operations
** +if+
** +and+
** +or+
** +cond+
* Symbols
** +intern+
* Strings
** +pos+
** +tlstr+
** +cn+
** +str+
** +string?+
** +n\->string+
** +string\->n+
* Assignments
** +set+
** +value+
* Error Handling
** +simple-error+
** +trap-error+
** +error-to-string+
* Generic Functions
** +defun+
** +lambda+
** +let+
** +=+
** +freeze+
** +type+
* Vectors
** +absvector+
** +address\->+
** +\<-address+
** +absvector?+
* Streams and I/O
** +write-byte+
** +read-byte+
** +open+
** +close+
* Time
** +get-time+
* Arithmetic
** +++
** +-+
** +*+
** +/+
** +>+
** +<+
** +>=+
** +\<=+
** +number?+

Ruby Interoperation
~~~~~~~~~~~~~~~~~~~
* Invoking Kl functions from Ruby
* Invoking Ruby functions from Kl
* Ruby \<\-> Kl converters
** Array \<\-> Absvector
